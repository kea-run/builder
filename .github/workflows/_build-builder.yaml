name: (sub workflow) create builder image
on:
  workflow_call:
    inputs:
      dir:
        type: string
        requred: true
    secrets:
      dockerhub_username:
        required: true
      dockerhub_token:
        required: true

defaults:
  run:
    shell: bash

jobs:
  create:
    permissions:
      contents: read
    strategy:
      matrix:
        arch:
          - amd64
            arm64

    runs-on: ${{ matrix.arch == 'arm64' && 'ubuntu-24.04-arm' || 'ubuntu-24.04' }}
    env:
      BUILDER_NAME: ${{ github.event.repository.name }}-${{ inputs.dir }}
      BUILDER_PATH: ${{ inputs.dir }}
      IMAGE_NAME: ${{ github.event.repository.name }}-${{ inputs.dir }}:${{ matrix.build.arch }}-${{ github.run_number }} 
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Pack CLI
        uses: buildpacks/github-actions/setup-pack@c502bcff683efa6f6d56a325df3fbe1722e21881 # v5.8.11

      - name: Create Docker images
        wokring-dir: ${{ inputs.dir }}
        run: |
          cat $BUILER_PATH/buildpack.toml

          pack builder create ${{ env.IMAGE_NAME }} \
            --config builder.toml
        
      - name: Export Docker images from the Docker daemon
        id: docker_save
        # Using sed rather than yq until this yq bug is fixed:
        # https://github.com/mikefarah/yq/issues/1758
        run: |
          docker_archive="${{ env.BUILDER_NAME }}_${{ matrix.build.arch }}.tar.zst"

          docker save ${{ env.IMAGE_NAME  }} | zstd -T0 --long=31 -o $docker_archive
          echo "saved ${{ env.IMAGE_NAME }} to $docker_archive"

          echo "docker_archive=$docker_archive" >> "$GITHUB_OUTPUT"

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-${{ inputs.dir }}_${{ matrix.build.arch }}
          path: ${{ steps.docker_save.outputs.docker_archive }}

  push:
    strategy:
      fail-fast: false
      matrix:
        container_registry: 
          - registry: ghcr.io/${{ github.repository_owner }} 
            username: ${{ github.actor }}
            password_secret: GITHUB_TOKEN
          - registry: "" # dockerhub
            username: dockerhub_username
            repo: ${{ inputs.dockerhub_repo }}
            password_secret: dockerhub_token
    runs-on: ubuntu-latest
    needs: [create]
    permissions:
      packages: write
    env:
      REGISTRY_PREFIX: ${{ format('{0}/', matrix.container_registry.registry || matrix.container_registry.repo ) }}
      BUILDER_NAME: ${{ inputs.dir }}

    steps:
      - name: Download image artifacts
        uses: actions/download-artifact@v4
        with:
          path: images

      - name: Log in to the Container registry
        uses: docker/login-action@v3.4.0
        with:
          registry: ${{ matrix.container_registry.registry }}
          username: ${{ secrets[matrix.container_registry.username] || matrix.container_registry.username }}
          password: ${{ secrets[matrix.container_registry.password_secret] }}
      - name: Load and push docker images
        id: images
        run: |
          ls -la ./images
        
          docker_args=""
          image="${{ env.REGISTRY_PREFIX }}"

          for f in $(find ./images -maxdepth 2 -type f); do
              basename="$(basename $f)"
              echo "Loading $f into docker"
              zstd -dc --long=31 $f | docker load

              filename="${basename%.*.*}"
              IFS=_ read -r image tag <<< $filename
             
              image_name="${{ env.REGISTRY_PREFIX }}$image:$tag"

              echo "got image: $image:$tag from $f"

              docker tag $image:$tag-${{ github.run_number }} $image_name 
              echo "Pushing $image_name"
              docker push $image_name

              docker_args=" --amend $image_name $docker_args"

          done
      
          echo "docker_args=$docker_args" >> "$GITHUB_OUTPUT"


      - name: Create and push docker manifest
        run: |
          out_image_name="${{ env.REGISTRY_PREFIX }}${{ github.event.repository.name }}-${{ inputs.dir }}:latest"
          docker manifest create \
            $out_image_name \
            ${{ steps.images.outputs.docker_args }}

            docker manifest push $out_image_name
